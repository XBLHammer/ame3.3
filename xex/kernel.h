#ifndef _KERNEL_H
#define _KERNEL_H

#pragma once
#include "stdafx.h"

#pragma comment(lib, "xav")

#define ORDINAL(x)

typedef HRESULT NTSTATUS;
typedef DWORD ACCESS_MASK;
typedef UINT64 QWORD;

#define __isync() __emit(0x4C00012C)

#define CONSTANT_OBJECT_STRING(s) { strlen(s) / sizeof(CHAR), (strlen(s) / sizeof(CHAR)) + 0x01, s }
#define MAKE_STRING(s) { (WORD)(strlen(s)), (WORD)((strlen(s)) + 0x01), (PCHAR)s }
#define EXPORTNUM(x)

#define STATUS_SUCCESS 0x00
#define NT_EXTRACT_ST(Status) ((((DWORD)(Status)) >> 0x1E) & 0x03)
#define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0x00)
#define NT_INFORMATION(Status) (NT_EXTRACT_ST(Status) == 0x01)
#define NT_WARNING(Status) (NT_EXTRACT_ST(Status) == 0x02)
#define NT_ERROR(Status) (NT_EXTRACT_ST(Status) == 0x03)

#define INVALID_FILE_ATTRIBUTES -0x01
#define FILE_SYNCHRONOUS_IO_NONALERT 0x20
#define OBJ_CASE_INSENSITIVE 0x40

#define EX_CREATE_FLAG_SUSPENDED 0x00000001
#define EX_CREATE_FLAG_SYSTEM 0x00000002
#define MAGIC_THREAD_SPEED 0x18000424
#define EX_CREATE_FLAG_FAST EX_CREATE_FLAG_SUSPENDED | EX_CREATE_FLAG_SYSTEM | MAGIC_THREAD_SPEED

#define HvxPeekPokeExpID 0x48565050
#define HvxCall QWORD _declspec(naked)

typedef struct _STRING {
	WORD Length;
	WORD MaxLength;
	PCHAR Buffer;
} STRING, *PSTRING;

typedef struct _CSTRING {
	WORD Length;
	WORD MaxLength;
	CONST PCHAR Buffer;
} CSTRING, *PCSTRING;

typedef struct _UNICODE_STRING {
	WORD Length;
	WORD MaxLength;
	PWCHAR Buffer;
} UNICODE_STRING, *PUNICODE_STRING;

typedef STRING OBJECT_STRING;
typedef CSTRING COBJECT_STRING;
typedef PSTRING POBJECT_STRING;
typedef PCSTRING PCOBJECT_STRING;
typedef STRING OEM_STRING;
typedef PSTRING POEM_STRING;
typedef CHAR OCHAR;
typedef PCHAR POCHAR;
typedef PSTR POSTR;
typedef PCSTR PCOSTR;
typedef PCHAR PSZ;
typedef CONST PCHAR PCSZ;
typedef STRING ANSI_STRING;
typedef PSTRING PANSI_STRING;
typedef CSTRING CANSI_STRING;
typedef PCSTRING PCANSI_STRING;
typedef CONST PUNICODE_STRING PCUNICODE_STRING;

#define OTEXT(quote) __OTEXT(quote)

typedef struct _IO_STATUS_BLOCK {
	union {
		NTSTATUS Status;
		PVOID Pointer;
	} st;
	DWORD Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;

typedef VOID (NTAPI *PIO_APC_ROUTINE) (
	IN PVOID ApcContext,
	IN PIO_STATUS_BLOCK IoStatusBlock,
	IN DWORD Reserved
	);

typedef struct _OBJECT_ATTRIBUTES {
	HANDLE RootDirectory;
	POBJECT_STRING ObjectName;
	DWORD Attributes;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

#define InitializeObjectAttributes(p, Name, Attrib, Root) { \
	(p)->RootDirectory = Root; \
	(p)->Attributes = Attrib; \
	(p)->ObjectName = Name; \
}

typedef struct _XBOX_HARDWARE_INFO {
	DWORD Flags;
	BYTE NumberOfProcessors;
	BYTE PCIBridgeRevisionID;
	BYTE Reserved[0x06];
	WORD BldrMagic;
	WORD BldrFlags;
} XBOX_HARDWARE_INFO, *PXBOX_HARDWARE_INFO;

typedef struct _XEX_IMPORT_TABLE_ENT {
	DWORD ImportDestinationAddress;
	DWORD ImportStubAddress;
} XEX_IMPORT_TABLE_ENT, *PXEX_IMPORT_TABLE_ENT;

typedef struct _XEX_IMPORT_TABLE {
	DWORD TableSize;
	BYTE NextImportDigest[0x14];
	DWORD ModuleNumber;
	DWORD Version[0x02];
	BYTE Unused;
	BYTE ModuleIndex;
	WORD ImportCount;
	DWORD ImportStubAddr[0x01];
} XEX_IMPORT_TABLE, *PXEX_IMPORT_TABLE;

typedef struct _HV_IMAGE_IMPORT_TABLE { 
	BYTE NextImportDigest[0x14];
	DWORD ModuleNumber;
	DWORD Version[0x02];
	BYTE Unused;
	BYTE ModuleIndex;
	WORD ImportCount;
} HV_IMAGE_IMPORT_TABLE, *PHV_IMAGE_IMPORT_TABLE;

typedef struct _XEX_IMPORT_TABLE_ORG { 
	DWORD TableSize;
	HV_IMAGE_IMPORT_TABLE ImportTable;
} XEX_IMPORT_TABLE_ORG, *PXEX_IMPORT_TABLE_ORG;

typedef struct _XEX_IMPORT_DESCRIPTOR {
	DWORD Size;
	DWORD TableSize;
	DWORD ModuleCount;
} XEX_IMPORT_DESCRIPTOR, *PXEX_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_EXPORT_ADDRESS_TABLE {
	DWORD Magic[0x03];
	DWORD ModuleNumber[0x02];
	DWORD Version[0x03];
	DWORD ImageBaseAddress;
	DWORD Count;
	DWORD Base;
	DWORD OrdinalOffset[0x01];
} IMAGE_EXPORT_ADDRESS_TABLE, *PIMAGE_EXPORT_ADDRESS_TABLE;

typedef struct _XEX_SECURITY_INFO {
	DWORD Size;
	DWORD ImageSize;
	BYTE Signature[0x100];
	DWORD InfoSize;
	DWORD ImageFlags;
	DWORD LoadAddress;
	BYTE ImageHash[0x14];
	DWORD ImportTableCount;
	BYTE ImportDigest[0x14];
	BYTE MediaID[0x10];
	BYTE ImageKey[0x10];
	PIMAGE_EXPORT_ADDRESS_TABLE ExportTableAddress;
	BYTE HeaderHash[0x14];
	DWORD GameRegion;
	DWORD AllowedMediaTypes;
	DWORD PageDescriptorCount;
} XEX_SECURITY_INFO, *PXEX_SECURITY_INFO;

typedef struct _IMAGE_XEX_HEADER {
	DWORD Magic;
	DWORD ModuleFlags;
	DWORD SizeOfHeaders;
	DWORD SizeOfDiscardableHeaders;
	PXEX_SECURITY_INFO SecurityInfo;
	DWORD HeaderDirectoryEntryCount;
} IMAGE_XEX_HEADER, *PIMAGE_XEX_HEADER;

typedef struct _LDR_DATA_TABLE_ENTRY {
	LIST_ENTRY InLoadOrderLinks;
	LIST_ENTRY InClosureOrderLinks;
	LIST_ENTRY InInitializationOrderLinks;
	PVOID NtHeadersBase;
	PVOID ImageBase;
	DWORD SizeOfNtImage;
	UNICODE_STRING FullDllName;
	UNICODE_STRING BaseDllName;
	DWORD Flags;
	DWORD SizeOfFullImage;
	PVOID EntryPoint;
	WORD LoadCount;
	WORD ModuleIndex;
	PVOID DllBaseOriginal;
	DWORD CheckSum;
	DWORD ModuleLoadFlags;
	DWORD TimeDateStamp;
	PVOID LoadedImports;
	PVOID HeaderBase;
	union {
		STRING LoadFileName;
		struct {
			PVOID ClosureRoot;
			PVOID TraversalParent;
		} asEntry;
	} inf;
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;

typedef struct _XEX_EXECUTION_ID {
	DWORD MediaID;
	DWORD Version;
	DWORD BaseVersion;
	union {
		struct {
			WORD PublisherID;
			WORD GameID;
		};
		DWORD TitleID;
	};
	BYTE Platform;
	BYTE ExecutableType;
	BYTE DiscNum;
	BYTE DiscsInSet;
	DWORD SaveGameID;
} XEX_EXECUTION_ID, *PXEX_EXECUTION_ID;

typedef struct _XBOX_KRNL_VERSION {
	WORD Major;
	WORD Minor;
	WORD Build;
	WORD Qfe;
} XBOX_KRNL_VERSION, *PXBOX_KRNL_VERSION;

typedef enum _KPROC_TYPE {
	PROC_IDLE = 0x00,
	PROC_USER = 0x01,
	PROC_SYSTEM = 0x02,
	PROC_DEBUG = 0x03
} KPROC_TYPE;

typedef enum _XAM_CACHE_FILE_TYPE { 
	XAM_CACHE_SYSTEM_UPDATE = 0x0C,
	XAM_CACHE_GAMER_TILE = 0x03,
	XAM_CACHE_GAME_TILE = 0x01,
	XAM_CACHE_NUI_HIVE_SETTING = 0x1A,
	XAM_CACHE_ACHIEVEMENT_TILE = 0x02,
	XAM_CACHE_CUSTOM_GAMER_TILE = 0x05,
	XAM_CACHE_NUI_SESSION = 0x17,
	XAM_CACHE_XSTS_TOKEN = 0x1E,
	XAM_CACHE_GAMER_TAG = 0x10,
	XAM_CACHE_GAMER_TILE_SMALL = 0x04,
	XAM_CACHE_XLFS_UPLOADER = 0x1B,
	XAM_CACHE_PROFILE_SETTINGS = 0x13,
	XAM_CACHE_DASH_CACHESEEDFILE = 0x1C,
	XAM_CACHE_FRIEND_MUTE_LIST = 0x07,
	XAM_CACHE_NUI_BIOMETRIC = 0x18,
	XAM_CACHE_TITLE_NAMES = 0x09,
	XAM_CACHE_MESSENGER_BUDDIES = 0x11,
	XAM_CACHE_QOS_HISTORY = 0x12,
	XAM_CACHE_GAME_INVITE = 0x0F,
	XAM_CACHE_TITLE_UPDATE = 0x0B,
	XAM_CACHE_ZEST_AUTHENTICATION = 0x1D,
	XAM_CACHE_VALIDATE_CERT = 0x16,
	XAM_CACHE_TICKETS = 0x08,
	XAM_CACHE_ALL = 0x00,
	XAM_CACHE_SPA_FILE = 0x0E,
	XAM_CACHE_NUI_TROUBLESHOOTER = 0x19,
	XAM_CACHE_LIVEID_DEVICE = 0x1F,
	XAM_CACHE_CERT_STORAGE = 0x15,
	XAM_CACHE_CUSTOM_GAMER_TILE_SMALL = 0x06,
	XAM_CACHE_AVATAR_GAMER_TILE = 0x14,
	XAM_CACHE_RECENT_PLAYERS = 0x0A,
	XAM_CACHE_DASHBOARD_APP = 0x0D
} XAM_CACHE_FILE_TYPE;

typedef enum _PEEK_POKE_TYPE {
	PEEK_BYTE = 0x00,
	PEEK_WORD = 0x01,
	PEEK_DWORD = 0x02,
	PEEK_QWORD = 0x03,
	PEEK_BYTES = 0x04,
	POKE_BYTE = 0x05,
	POKE_WORD = 0x06,
	POKE_DWORD = 0x07,
	POKE_QWORD = 0x08,
	POKE_BYTES = 0x09,
	PEEK_SPR = 0x0A
} PEEK_POKE_TYPE;

CONST BYTE HvxPeekPokeExp[0x2F0] = {
	0x48, 0x58, 0x50, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x34, 0x1F, 0xD6, 0xDA,
	0x2F, 0xCA, 0xA8, 0x17, 0xF0, 0x30, 0xCC, 0x44, 0x0A, 0x41, 0xFA, 0x7C, 0xA0, 0xC1, 0xFD, 0x33,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7A, 0x02, 0x59, 0x43, 0x9E, 0xE6, 0x93, 0xD5, 0x01, 0xC9, 0x48, 0x4D, 0xB2, 0xBF, 0x9D, 0x18,
	0xA9, 0x16, 0x5E, 0xFF, 0x1E, 0xD5, 0xB6, 0xA8, 0x79, 0x60, 0xA8, 0x2F, 0xC1, 0x8D, 0x20, 0x8A,
	0xEB, 0x46, 0xC3, 0x01, 0xEC, 0xC4, 0xDB, 0xDF, 0xA1, 0x04, 0xD1, 0xDF, 0x23, 0x69, 0x5E, 0xCC,
	0x50, 0xC3, 0xF4, 0xDD, 0xA4, 0x80, 0x7D, 0x05, 0x2D, 0x57, 0xFF, 0x60, 0xA5, 0x58, 0x69, 0x27,
	0x9A, 0x33, 0x70, 0xE8, 0xC2, 0x82, 0xDC, 0xDA, 0xE2, 0x4D, 0xE1, 0xF8, 0xA1, 0xD2, 0xCC, 0x8D,
	0x98, 0x05, 0xD1, 0xA3, 0x2E, 0x37, 0x06, 0x0F, 0xF7, 0xEF, 0x70, 0xEF, 0x28, 0xD7, 0xAE, 0xD5,
	0x5B, 0x19, 0x1B, 0x13, 0x50, 0x0D, 0x15, 0x00, 0x92, 0x01, 0xEE, 0x38, 0xA7, 0x61, 0xB1, 0xA1,
	0x27, 0xBF, 0xB0, 0x42, 0x0F, 0x07, 0xC3, 0x8F, 0x78, 0xAD, 0xAF, 0x87, 0x8F, 0x34, 0x8A, 0xA6,
	0x69, 0x7D, 0x40, 0xB6, 0x5C, 0x9E, 0x01, 0xEC, 0x9F, 0x5E, 0x78, 0x30, 0x09, 0x5A, 0x21, 0xFF,
	0x35, 0x8C, 0x13, 0xBE, 0xBC, 0x92, 0x67, 0xE3, 0x17, 0x0B, 0x09, 0x1C, 0xE2, 0x9D, 0xEC, 0xFD,
	0xFB, 0x6C, 0x49, 0x3A, 0xCC, 0xE7, 0x99, 0xB6, 0xB3, 0x8A, 0x8F, 0xEF, 0xF7, 0xA0, 0x28, 0x4F,
	0x72, 0xC7, 0x3D, 0xD7, 0xCC, 0xEB, 0xB2, 0x1B, 0x74, 0x93, 0xD7, 0x02, 0x05, 0xD5, 0xE1, 0x25,
	0x35, 0xD7, 0xE0, 0x50, 0xEA, 0xCF, 0x82, 0x69, 0xE3, 0x3B, 0x6F, 0xFA, 0x13, 0xF0, 0x5B, 0xD9,
	0x1A, 0xB0, 0xD3, 0x0B, 0x85, 0x4D, 0x6A, 0xFC, 0x31, 0x45, 0xC3, 0xA3, 0xFA, 0x7E, 0xDA, 0x93,
	0x84, 0xD4, 0xE7, 0xFA, 0xAB, 0x7C, 0x22, 0x96, 0x54, 0x69, 0x7F, 0xC9, 0xF8, 0xC4, 0x5A, 0xC2,
	0x82, 0x99, 0x34, 0x46, 0x81, 0x6F, 0x06, 0x33, 0x19, 0x94, 0x74, 0xA4, 0x76, 0x02, 0x4F, 0xB9,
	0x48, 0x56, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x01, 0x90,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x7D, 0x88, 0x02, 0xA6, 0xFB, 0xE1, 0xFF, 0xF0, 0xF9, 0x81, 0xFF, 0xF8, 0x94, 0x21, 0xFF, 0x00,
	0x7C, 0x9F, 0x23, 0x78, 0x2C, 0x1F, 0x00, 0x00, 0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x01,
	0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x02, 0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x03,
	0x41, 0x82, 0x00, 0xC0, 0x2C, 0x1F, 0x00, 0x0A, 0x41, 0x82, 0x00, 0x64, 0x2C, 0x1F, 0x00, 0x05,
	0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x06, 0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x07,
	0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x08, 0x41, 0x82, 0x00, 0xD4, 0x2C, 0x1F, 0x00, 0x0B,
	0x40, 0x80, 0x00, 0x00, 0x80, 0x60, 0x00, 0x4C, 0x7C, 0x62, 0x1A, 0x14, 0x80, 0x63, 0x00, 0x08,
	0x7C, 0x69, 0x03, 0xA6, 0x7C, 0xC3, 0x33, 0x78, 0x38, 0x80, 0x00, 0x01, 0x4E, 0x80, 0x04, 0x21,
	0x7C, 0x66, 0x1B, 0x78, 0x7C, 0xE9, 0x03, 0xA6, 0x2C, 0x1F, 0x00, 0x04, 0x41, 0x82, 0x00, 0x6C,
	0x2C, 0x1F, 0x00, 0x09, 0x41, 0x82, 0x00, 0xA0, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x05,
	0x7C, 0xA6, 0x2B, 0x78, 0x3C, 0x80, 0x7C, 0x60, 0x50, 0xA6, 0x54, 0x6A, 0x60, 0x84, 0x02, 0xA6,
	0x50, 0xC4, 0x32, 0xE8, 0x7C, 0x68, 0x02, 0xA6, 0x38, 0x63, 0x00, 0x30, 0x90, 0x83, 0x00, 0x00,
	0x7C, 0x00, 0x18, 0x6C, 0x7C, 0x00, 0x1F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C,
	0x7C, 0x79, 0x4A, 0xA6, 0x48, 0x00, 0x00, 0x98, 0x88, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x90,
	0xA0, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x88, 0x80, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x80,
	0xE8, 0x65, 0x00, 0x00, 0x48, 0x00, 0x00, 0x78, 0x8B, 0xE5, 0x00, 0x00, 0x9B, 0xE6, 0x00, 0x00,
	0x38, 0xA5, 0x00, 0x01, 0x38, 0xC6, 0x00, 0x01, 0x42, 0x00, 0xFF, 0xF0, 0x38, 0x60, 0x00, 0x00,
	0x48, 0x00, 0x00, 0x5C, 0x98, 0xC5, 0x00, 0x00, 0x48, 0x00, 0x00, 0x40, 0xB0, 0xC5, 0x00, 0x00,
	0x48, 0x00, 0x00, 0x38, 0x90, 0xC5, 0x00, 0x00, 0x48, 0x00, 0x00, 0x30, 0xF8, 0xC5, 0x00, 0x00,
	0x48, 0x00, 0x00, 0x28, 0x8B, 0xE6, 0x00, 0x00, 0x9B, 0xE5, 0x00, 0x00, 0x7C, 0x00, 0x28, 0x6C,
	0x7C, 0x00, 0x2F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C, 0x38, 0xA5, 0x00, 0x01,
	0x38, 0xC6, 0x00, 0x01, 0x42, 0x00, 0xFF, 0xE0, 0x38, 0x60, 0x00, 0x00, 0x7C, 0x00, 0x28, 0x6C,
	0x7C, 0x00, 0x2F, 0xAC, 0x7C, 0x00, 0x04, 0xAC, 0x4C, 0x00, 0x01, 0x2C, 0x38, 0x21, 0x01, 0x00,
	0xEB, 0xE1, 0xFF, 0xF0, 0xE9, 0x81, 0xFF, 0xF8, 0x7D, 0x88, 0x03, 0xA6, 0x4E, 0x80, 0x00, 0x20
};

typedef HRESULT (*pDmSetMemory)(LPVOID lpbAddr, DWORD cb, LPCVOID lpbBuf, LPDWORD pcbRet);

class MemoryBuffer {
public:
	MemoryBuffer(DWORD Size = 0x200) {
		m_Buffer = NULL;
		m_DataLength = NULL;
		m_BufferSize = NULL;
		if ((Size < 0xFFFFFFFF) && (Size != NULL)) {
			m_Buffer = (PBYTE)malloc(Size + 0x01);
			if (m_Buffer) {
				m_BufferSize = Size;
				m_Buffer[0x00] = NULL;
			}
		}
	};
	~MemoryBuffer() {
		if (m_Buffer)
			free(m_Buffer);

		m_Buffer = NULL;
		m_DataLength = NULL;
		m_BufferSize = NULL;
	};
	BOOL Add(CONST PVOID p, DWORD Size) {
		if (CheckSize(Size)) {
			memcpy(m_Buffer + m_DataLength, p, Size);
			m_DataLength += Size;
			*(m_Buffer + m_DataLength) = NULL;
			return TRUE;
		}else{
			return FALSE;
		}
	};
	PBYTE GetBuffer() CONST {
		return m_Buffer;
	};
	DWORD GetLength() CONST {
		return m_DataLength;
	};
	VOID Rewind() {
		m_DataLength = NULL;
		m_Buffer[0x00] = NULL;
	};
	BOOL CheckSize(DWORD Size) {
		if (m_BufferSize >= (m_DataLength + Size)) {
			return TRUE;
		}else{
			DWORD NewSize = max(m_DataLength + Size, m_BufferSize * 0x02);
			PBYTE NewBuffer = (PBYTE)realloc(m_Buffer, NewSize + 0x01);
			if (NewBuffer) {
				m_Buffer = NewBuffer;
				m_BufferSize = NewSize;
				return TRUE;
			}else{
				return FALSE;
			}
		}
	}
private:
	PBYTE m_Buffer;
	DWORD m_DataLength;
	DWORD m_BufferSize;
};

#ifdef __cplusplus
extern "C" {
#endif
	VOID
		XapiThreadStartup(
			IN VOID (*StartRoutine)(PVOID),
			IN PVOID StartContext,
			IN DWORD ExitCode
		);

	NTSYSAPI
		ORDINAL(0x0D)
		DWORD
		NTAPI
		ExCreateThread(
			IN PHANDLE Handle,
			IN DWORD StackSize,
			IN PDWORD ThreadId,
			IN PVOID ApiThreadStartup,
			IN PTHREAD_START_ROUTINE StartAddress,
			IN PVOID Parameter,
			IN DWORD Flags
		);

	NTSYSAPI
		ORDINAL(0x28)
		VOID
		NTAPI
		HalReturnToFirmware(
			IN DWORD Mode
		);

	NTSYSAPI
		ORDINAL(0x29)
		VOID
		NTAPI
		HalSendSMCMessage(
		IN PVOID Input,
			OUT PVOID Ouput
		);

	NTSYSAPI
		BYTE
		ORDINAL(0x66)
		NTAPI
		KeGetCurrentProcessType(
			VOID
		);

	NTSYSAPI
		ORDINAL(0xBE)
		PVOID
		NTAPI
		MmGetPhysicalAddress(
			IN PVOID Address
		);

	NTSYSAPI
		ORDINAL(0x12B)
		PVOID
		NTAPI
		RtlImageXexHeaderField(
			IN PVOID HeaderBase,
			IN DWORD ImageField
		);

	ORDINAL(0x156)
		extern PXBOX_HARDWARE_INFO XboxHardwareInfo;

	ORDINAL(0x158)
		extern PXBOX_KRNL_VERSION XboxKrnlVersion;

	NTSYSAPI
		ORDINAL(0x195)
		DWORD
		NTAPI
		XexGetModuleHandle(
			IN PCHAR ModuleName,
			IN OUT HANDLE Handle
		);

	NTSYSAPI
		ORDINAL(397)
		VOID
		NTAPI
		XeCryptRc4(
			IN  const PBYTE pbKey,
			IN  DWORD cbKey,
			IN OUT PBYTE pbInpOut,
			IN  DWORD cbInpOut
		);

	NTSYSAPI
		EXPORTNUM(409)
		NTSTATUS
		NTAPI
		XexLoadImage(
			IN		LPCSTR szXexName,
			IN		DWORD dwModuleTypeFlags,
			IN		DWORD dwMinimumVersion,
			IN OUT	PHANDLE pHandle
		);

	NTSYSAPI
		ORDINAL(0x197)
		DWORD
		NTAPI
		XexGetProcedureAddress(
			IN HANDLE Handle,
			IN DWORD Ordinal,
			IN PVOID Address
		);

	NTSYSAPI
		ORDINAL(0x2B7)
		BOOL
		NTAPI
		XamCacheReset(
			DWORD FileType
		);
#ifdef __cplusplus
};
#endif

#endif